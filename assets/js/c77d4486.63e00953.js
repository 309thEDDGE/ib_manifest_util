"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[349],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),f=r,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return t?a.createElement(m,i(i({ref:n},s),{},{components:t})):a.createElement(m,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_label:"Creating Dockerfile Templates"},i="Creating Dockerfile Templates",l={unversionedId:"user-guide/creating_dockerfile_templates",id:"user-guide/creating_dockerfile_templates",title:"Creating Dockerfile Templates",description:"IB Manifest uses Jinja templating to make updating the Dockerfiles in the Iron",source:"@site/docs/user-guide/creating_dockerfile_templates.md",sourceDirName:"user-guide",slug:"/user-guide/creating_dockerfile_templates",permalink:"/ib_manifest_util/user-guide/creating_dockerfile_templates",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Creating Dockerfile Templates"},sidebar:"tutorialSidebar",previous:{title:"IB Manifest Basics",permalink:"/ib_manifest_util/user-guide/basics"},next:{title:"Contributing",permalink:"/ib_manifest_util/community/contributing"}},c={},p=[{value:"Dockerfile Templates in IB Manifest",id:"dockerfile-templates-in-ib-manifest",level:2},{value:"Using a template in the workflow",id:"using-a-template-in-the-workflow",level:2},{value:"Building a Dockerfile",id:"building-a-dockerfile",level:2}],s={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-dockerfile-templates"},"Creating Dockerfile Templates"),(0,r.kt)("p",null,"IB Manifest uses Jinja templating to make updating the Dockerfiles in the Iron\nBank (IB) repo as painless as possible. Each IB repo will need a Dockerfile\ntemplate located at ",(0,r.kt)("inlineCode",{parentName:"p"},"/config/Dockerfile.tpl"),". This guide will explain how to\ncreate the Dockerfile template for new projects."),(0,r.kt)("h2",{id:"dockerfile-templates-in-ib-manifest"},"Dockerfile Templates in IB Manifest"),(0,r.kt)("p",null,"For the most part, the Dockerfiles are fairly static with the exception of the\npython packages that get copied into them. Every time there is a change to the\nIB repo image, these packages get updated. The Dockerfile template allows you\nto avoid copy and pasting these COPY blocks or doing large string\nconcatenations."),(0,r.kt)("p",null,"An example Dockerfile template is shown in the repository in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/templates"),"\ndirectory. One is also provided here for reference, but we recommend starting\nwith the Dockerfile you are trying to templatize."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example Dockerfile Template"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'ARG BASE_REGISTRY=registry1.dso.mil\nARG BASE_IMAGE=ironbank/opensource/metrostar/miniconda\nARG BASE_TAG=4.11.0\n\nFROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG}\nWORKDIR /opt\nENV LOCAL_CONDA_CHANNEL="${WORKDIR}/local_channel"\nUSER root\n\nRUN mkdir /home/${NB_USER} \\\n    && chown -R ${NB_USER}:${NB_USER} /home/${NB_USER}\nRUN mkdir -p ${LOCAL_CONDA_CHANNEL} && chown -R ${NB_USER}:${NB_USER} ${LOCAL_CONDA_CHANNEL}\n\nCOPY --chown=${NB_USER}:${NB_USER} /config/channeldata.json ${LOCAL_CONDA_CHANNEL}/channeldata.json\nCOPY --chown=${NB_USER}:${NB_USER} /config/linux-64/repodata.json ${LOCAL_CONDA_CHANNEL}/linux-64/repodata.json\nCOPY --chown=${NB_USER}:${NB_USER} /config/noarch/repodata.json ${LOCAL_CONDA_CHANNEL}/noarch/repodata.json\nRUN chown -R ${NB_USER}:${NB_USER} ${LOCAL_CONDA_CHANNEL}\nRUN dnf update -y && dnf install -y bzip2 gcc\n\n\n# noarch packages\nCOPY [ \\{%- for pkg in noarch_packages %}\n"{{ pkg }}", \\\n{%- endfor %}\n"${LOCAL_CONDA_CHANNEL}/noarch/", \\\n]\n\n# linux packages\nCOPY [ \\{%- for pkg in linux_packages %}\n"{{ pkg }}", \\\n{%- endfor %}\n"${LOCAL_CONDA_CHANNEL}/linux-64/", \\\n]\n\n# special handling for packages with underscores\n{%- for pkg in underscore_packages %}\nCOPY ["{{ pkg }}", "${LOCAL_CONDA_CHANNEL}/linux-64/_{{ pkg }}"]\n{%- endfor %}\n\nRUN chown -R ${NB_USER}:${NB_USER} ${LOCAL_CONDA_CHANNEL}\nRUN chown -R ${NB_USER}:${NB_USER} /opt/\nRUN chown -R ${NB_USER}:${NB_USER} /home/\nUSER ${NB_USER}\nENV PATH="${CONDA_PATH}/bin:$PATH"\nWORKDIR /home/${NB_USER}\nUSER root\n\nRUN dnf clean all && \\\n    dnf remove -y bzip2 gcc && \\\n    rm -rf info && \\\n    conda clean -yaf && \\\n    rm -rf /home/${NB_USER}/.conda && \\\n    rm -rf /opt/conda/pkgs/cache && \\\n    rm -rf /root/micromamba/pkgs/cache\n\nRUN chown -R ${NB_USER}:${NB_USER} /opt/\nRUN chown -R ${NB_USER}:${NB_USER} /home/\nUSER ${NB_USER}\n\nHEALTHCHECK NONE\n')))),(0,r.kt)("p",null,"In order to create a Dockerfile, we really only need to account for 3 things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a list of noarch packages"),(0,r.kt)("li",{parentName:"ul"},"a list of linux packages"),(0,r.kt)("li",{parentName:"ul"},"a list of packages which start with an underscore")),(0,r.kt)("p",null,"That last one is rather interesting. Because of the linting stage of the IB\nPipeline, packages that lead with an underscore are deemed a security threat.\nTo avoid conflicts, we remove the underscore temporarily and add it back on the\nother side of the fence."),(0,r.kt)("p",null,"All you need to do is replace these 3 things with the jinja syntax for handling\nthose lists. Instead of many lines of ",(0,r.kt)("inlineCode",{parentName:"p"},"COPY")," statments, you'll now have:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'COPY [ \\{%- for pkg in noarch_packages %}\n"{{ pkg }}", \\\n{%- endfor %}\n"${LOCAL_CONDA_CHANNEL}/noarch/", \\\n]\n')),(0,r.kt)("p",null,"for the noarch, linux, and underscore packages."),(0,r.kt)("h2",{id:"using-a-template-in-the-workflow"},"Using a template in the workflow"),(0,r.kt)("p",null,"The high level ",(0,r.kt)("inlineCode",{parentName:"p"},"Update Repository")," workflow will determine these package lists\nfor you and provide them to the template as a dictionary. You can either allow\nthe code to automatically pull the template from the IB repo by calling:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"update_repository(\n    repo_dir='path_to_repo',\n    dockerfile_version='dockerfile_version',\n)\n")),(0,r.kt)("p",null,"Or, you can specify the specific location of a template you'd like to usse."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"update_repository(\n    repo_dir='path_to_repo',\n    dockerfile_version='dockerfile_version',\n    dockerfile_template_path='path/to/template.tpl,\n)\n")),(0,r.kt)("h2",{id:"building-a-dockerfile"},"Building a Dockerfile"),(0,r.kt)("p",null,"If you just want to build an individual Dockerfile from a template, you can\ncall:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'write_dockerfile(\n    noarch_packages=["requests-2.28.1-pyhd8ed1ab_1.tar.bz2"],\n    linux_packages=["python-3.10.6-h582c2e5_0_cpython.tar.bz2"],\n    underscore_packages=["openmp_mutex-4.5-2_gnu.tar.bz2"],\n    output_path=\'Dockerfile,\n    dockerfile_template_path=\'path/to/template.tpl,\n)\n')))}u.isMDXComponent=!0}}]);