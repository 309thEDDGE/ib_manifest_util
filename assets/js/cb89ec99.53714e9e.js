"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[747],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_label:"Creating a Dockerfile Template",title:"Creating a Dockerfile Template",description:"How to build a Dockerfile Template for your repo"},r="Creating a Dockerfile Template",l={unversionedId:"user-guide/creating_dockerfile_template",id:"user-guide/creating_dockerfile_template",title:"Creating a Dockerfile Template",description:"How to build a Dockerfile Template for your repo",source:"@site/docs/user-guide/creating_dockerfile_template.md",sourceDirName:"user-guide",slug:"/user-guide/creating_dockerfile_template",permalink:"/ib_manifest_util/user-guide/creating_dockerfile_template",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Creating a Dockerfile Template",title:"Creating a Dockerfile Template",description:"How to build a Dockerfile Template for your repo"},sidebar:"tutorialSidebar",previous:{title:"Updating an Iron Bank Repo",permalink:"/ib_manifest_util/user-guide/updating_repos"},next:{title:"Contributing",permalink:"/ib_manifest_util/community/contributing"}},c={},p=[{value:"Understanding Jinja templating",id:"understanding-jinja-templating",level:2},{value:"Make a copy of the final Dockerfile",id:"make-a-copy-of-the-final-dockerfile",level:2},{value:"Templatizing the Dockerfile",id:"templatizing-the-dockerfile",level:2},{value:"Using the template to create a Dockerfile",id:"using-the-template-to-create-a-dockerfile",level:2}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-a-dockerfile-template"},"Creating a Dockerfile Template"),(0,o.kt)("p",null,"The IB Manifest package uses\n",(0,o.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/"},"Jinja templating")," for efficiently creating\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," is closely tied to the individual IB Repo; therefore, each IB\nRepo will need it's own ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," template. This guide will walk you through\ncreating this template."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The hardening manifest is also built with a Jinja template, but since it's the\nsame for all repos, it is located inside the repo. You won't need to\nmodify it.")),(0,o.kt)("h2",{id:"understanding-jinja-templating"},"Understanding Jinja templating"),(0,o.kt)("p",null,"Jinja templates are wonderful tools that not only allow us to write a template\nwith placeholders, but we can also performs some simple code within template.\nThis allows us to pass in things like lists in order to generate multiple\nitems without having to explicitely write them all out or know exactly how many\nitems we have."),(0,o.kt)("p",null,"First, we'll create a templatized version of our Dockerfile.\nThen we'll explain how each of these get populated.\nFinally, we'll test it out."),(0,o.kt)("h2",{id:"make-a-copy-of-the-final-dockerfile"},"Make a copy of the final Dockerfile"),(0,o.kt)("p",null,"The best approach to creating the Jinja template is to start with what will\nbe your final output Dockerfile. This is the Dockerfile that is currently\noperational in your IB Repo."),(0,o.kt)("p",null,"As an example, we provide a sample one here (this has been pared down a bit so\ndont expect it to work):"),(0,o.kt)("details",null,(0,o.kt)("summary",null," Click here for Sample Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'ARG BASE_REGISTRY=registry1.dso.mil\nARG BASE_IMAGE=ironbank/opensource/metrostar/miniconda\nARG BASE_TAG=4.12.0\n\nFROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG}\n\nSHELL ["/usr/bin/bash", "-c"]\n\nARG NB_USER="jovyan"\nARG NB_UID="1000"\nARG NB_GID="100"\n\nENV CONDA_PATH="/opt/conda" \\\n    NB_USER="${NB_USER}" \\\n    NB_UID="${NB_UID}" \\\n    NB_GID="${NB_GID}"\n\nUSER root\nRUN yum install mesa-libGL -y && yum clean all\n\nRUN mkdir /home/${NB_USER} \\\n    && chown -R ${NB_USER}:${NB_USER} /home/${NB_USER}\n\nENV LOCAL_CONDA_CHANNEL="/home/${NB_USER}/local-channel"\n\n#create directory for our local conda channel\nRUN mkdir -p ${LOCAL_CONDA_CHANNEL} && chown -R ${NB_USER}:${NB_USER} ${LOCAL_CONDA_CHANNEL}\n\n#copy over local-channel metadata configuration files\nCOPY --chown=${NB_USER}:${NB_USER} /config/linux-64/repodata.json ${LOCAL_CONDA_CHANNEL}/linux-64/repodata.json\nCOPY --chown=${NB_USER}:${NB_USER} /config/noarch/repodata.json ${LOCAL_CONDA_CHANNEL}/noarch/repodata.json\nRUN chown -R ${NB_USER}:${NB_USER} ${LOCAL_CONDA_CHANNEL}\n\n\nCOPY ["fonts-conda-ecosystem-1-0.tar.bz2", \\\n"geopandas-base-0.11.1-pyha770c72_0.tar.bz2", \\\n"cloudpickle-2.1.0-pyhd8ed1ab_0.tar.bz2", \\\n"${LOCAL_CONDA_CHANNEL}/noarch/"]\nCOPY ["libnetcdf-4.8.1-nompi_h21705cb_104.tar.bz2", \\\n"tornado-6.1-py39hb9d737c_3.tar.bz2", \\\n"curl-7.83.1-h7bff187_0.tar.bz2", \\\n"${LOCAL_CONDA_CHANNEL}/linux-64/"]\nCOPY ["openmp_mutex-4.5-2_gnu.tar.bz2", "${LOCAL_CONDA_CHANNEL}/linux-64/_openmp_mutex-4.5-2_gnu.tar.bz2"]\nCOPY ["libgcc_mutex-0.1-conda_forge.tar.bz2", "${LOCAL_CONDA_CHANNEL}/linux-64/_libgcc_mutex-0.1-conda_forge.tar.bz2"]\n\n# additional scripts that get added\nCOPY ["code_server.tar.gz", \\\n"start.sh", \\\n"start-notebook.sh", \\\n"start-singleuser.sh", \\\n"/home/${NB_USER}/"]\n\nRUN mv "/home/${NB_USER}/code_server.tar.gz" /usr/local/bin/ \\\n    && mv "/home/${NB_USER}/start.sh" /usr/local/bin/ \\\n    && mv "/home/${NB_USER}/start-notebook.sh" /usr/local/bin/ \\\n    && mv "/home/${NB_USER}/start-singleuser.sh" /usr/local/bin/ \\\n    && chmod +x /usr/local/bin/start.sh \\\n    && chmod +x /usr/local/bin/start-notebook.sh \\\n    && chmod +x /usr/local/bin/start-singleuser.sh\n\nRUN chown -R ${NB_USER}:${NB_USER} ${LOCAL_CONDA_CHANNEL}\nENV PATH="${CONDA_PATH}/bin:$PATH"\nWORKDIR /home/${NB_USER}\nUSER root\n\n#remove cve findings and cleanup\nRUN dnf clean all && \\\n    dnf remove -y bzip2 gcc && \\\n    rm -rf info && \\\n    conda clean -yaf && \\\n    rm -rf /root/micromamba/pkgs/tornado-6.1-py39h3811e60_1/lib/python3.9/site-packages/tornado/test/test.key && \\\n    rm -rf /info && \\\n    rm -rf /home/${NB_USER}/.conda\n\nUSER ${NB_USER}\n\n# Configure container startup\nENTRYPOINT ["tini", "--", "/usr/bin/bash",".init/start.sh"]\n'))),(0,o.kt)("p",null,"As you can see, we have a lot going on in this Dockerfile. However, we only\nneed to make changes to the package list. When we run IB Manifest, it will\ngenerate an updated list of packages. These will be fed into our Jinja template\nin order to update the Dockerfile."),(0,o.kt)("h2",{id:"templatizing-the-dockerfile"},"Templatizing the Dockerfile"),(0,o.kt)("p",null,"Now we'll replace the sections of the Dockefile which contain the packages with\nJinja template code."),(0,o.kt)("p",null,"IB Manifest will generate a dictionary of variables. The Jinja template engine\nwill consume this dictionary and use it to construct our Dockerfile."),(0,o.kt)("p",null,"You can immediately replace the COPY sections with packages with the template\ncommands, but we recommend the following approach which lends itself well to\ntesting."),(0,o.kt)("p",null,"Below is the structure of the dictionary that our Jinja template is going\nto expect. You can see we have separate items for ",(0,o.kt)("inlineCode",{parentName:"p"},"noarch_packages"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"linux_packages"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"underscore_packages")," (these need special handling to\npass Iron Bank security screening). Let's begin by copying the package lists\nfrom your Dockerfile into this dictionary. Note that the final item in the\nCOPY list is the location to which they will be copied. We won't need that here."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'content = {\n    "noarch_packages": [\n        "fonts-conda-ecosystem-1-0.tar.bz2",\n        "geopandas-base-0.11.1-pyha770c72_0.tar.bz2",\n        "cloudpickle-2.1.0-pyhd8ed1ab_0.tar.bz2"\n        ],\n    "linux_packages": [\n        "libnetcdf-4.8.1-nompi_h21705cb_104.tar.bz2",\n        "tornado-6.1-py39hb9d737c_3.tar.bz2",\n        "curl-7.83.1-h7bff187_0.tar.bz2"\n        ],\n    "underscore_packages": [\n        "openmp_mutex-4.5-2_gnu.tar.bz2",\n        "libgcc_mutex-0.1-conda_forge.tar.bz2"\n        ],\n}\n')),(0,o.kt)("p",null,"Now that we have those copied over, we are ready to copy in our Jinja commands.\nReplace the COPY statements for those sections with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# noarch packages\nCOPY [ \\{%- for pkg in noarch_packages %}\n"{{ pkg }}", \\\n{%- endfor %}\n"${LOCAL_CONDA_CHANNEL}/noarch/", \\\n]\n\n# linux packages\nCOPY [ \\{%- for pkg in linux_packages %}\n"{{ pkg }}", \\\n{%- endfor %}\n"${LOCAL_CONDA_CHANNEL}/linux-64/", \\\n]\n\n# special handling for packages with underscores\n{%- for pkg in underscore_packages %}\nCOPY ["{{ pkg }}", "${LOCAL_CONDA_CHANNEL}/linux-64/_{{ pkg }}"]\n{%- endfor %}\n')),(0,o.kt)("p",null,"We suggest saving this file in your IB Repo as ",(0,o.kt)("inlineCode",{parentName:"p"},"/config/Dockerfile.tpl"),"."),(0,o.kt)("p",null,"The Jinja template engine will accept the variable lists from our ",(0,o.kt)("inlineCode",{parentName:"p"},"content"),"\ndictionary and unpack them for us!"),(0,o.kt)("h2",{id:"using-the-template-to-create-a-dockerfile"},"Using the template to create a Dockerfile"),(0,o.kt)("p",null,"At this point, you are ready to run ",(0,o.kt)("inlineCode",{parentName:"p"},"update_repo"),". However, a little\ntesting would be prudent."),(0,o.kt)("p",null,"There is an example script in the package that can be modified."),(0,o.kt)("p",null,"We can use the low-level function ",(0,o.kt)("inlineCode",{parentName:"p"},"write_templatized_file")," to test out if our\nchanges above worked as expected. Below is a sample script that you can use\nfor testing (adapted from\n",(0,o.kt)("inlineCode",{parentName:"p"},"ib_manifest_util/examples/create_dockerfile_template.py"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from ib_manifest_util.util import write_templatized_file\n\ntemplate_filename = \'Dockerfile.tpl\'\ntemplate_dir = \'template/directory/\'\n\noutput_path = \'output_Dockerfile\'\n\ncontent = {\n    "noarch_packages": [\n        "fonts-conda-ecosystem-1-0.tar.bz2",\n        "geopandas-base-0.11.1-pyha770c72_0.tar.bz2",\n        "cloudpickle-2.1.0-pyhd8ed1ab_0.tar.bz2"\n        ],\n    "linux_packages": [\n        "libnetcdf-4.8.1-nompi_h21705cb_104.tar.bz2",\n        "tornado-6.1-py39hb9d737c_3.tar.bz2",\n        "curl-7.83.1-h7bff187_0.tar.bz2"\n        ],\n    "underscore_packages": [\n        "openmp_mutex-4.5-2_gnu.tar.bz2",\n        "libgcc_mutex-0.1-conda_forge.tar.bz2"\n        ],\n}\n\nwrite_templatized_file(\n    template_filename=template_filename,\n    output_path=output_path,\n    content=content,\n    template_dir=template_dir,\n)\n')),(0,o.kt)("p",null,"Confirm that the output Dockerfile looks as expected and you've done it! Now\nall that's left is to push the Dockerfile template up to the IB Repo! \u2728"))}u.isMDXComponent=!0}}]);